// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modelo;

#nullable disable

namespace Modelo.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20231204000537_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entidades.Equipo", b =>
                {
                    b.Property<int>("EquipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipoId"));

                    b.Property<int>("CapitanId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TorneoId")
                        .HasColumnType("int");

                    b.HasKey("EquipoId");

                    b.HasIndex("CapitanId");

                    b.HasIndex("TorneoId");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("Entidades.Jugador", b =>
                {
                    b.Property<int>("JugadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JugadorId"));

                    b.Property<bool>("EnEquipo")
                        .HasColumnType("bit");

                    b.Property<int?>("EquipoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RangoId")
                        .HasColumnType("int");

                    b.HasKey("JugadorId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("RangoId");

                    b.ToTable("Jugadores");
                });

            modelBuilder.Entity("Entidades.Partida", b =>
                {
                    b.Property<int>("PartidaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartidaId"));

                    b.Property<string>("NombreLocal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreVisitante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PartidaJugada")
                        .HasColumnType("bit");

                    b.Property<int>("ResultadoPartidaId")
                        .HasColumnType("int");

                    b.Property<int?>("TorneoId")
                        .HasColumnType("int");

                    b.HasKey("PartidaId");

                    b.HasIndex("TorneoId");

                    b.ToTable("Partidas");
                });

            modelBuilder.Entity("Entidades.Rango", b =>
                {
                    b.Property<int>("RangoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RangoId"));

                    b.Property<int>("Escala")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RangoId");

                    b.ToTable("Rangos");
                });

            modelBuilder.Entity("Entidades.ResultadoPartida", b =>
                {
                    b.Property<int>("ResultadoPartidaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultadoPartidaId"));

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<bool>("GanadorLocal")
                        .HasColumnType("bit");

                    b.Property<bool>("GanadorVisitante")
                        .HasColumnType("bit");

                    b.Property<string>("Mapa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MuertesLocal")
                        .HasColumnType("int");

                    b.Property<int>("MuertesVisitante")
                        .HasColumnType("int");

                    b.Property<int>("PartidaId")
                        .HasColumnType("int");

                    b.Property<int>("RondasLocal")
                        .HasColumnType("int");

                    b.Property<int>("RondasVisitante")
                        .HasColumnType("int");

                    b.HasKey("ResultadoPartidaId");

                    b.HasIndex("PartidaId")
                        .IsUnique();

                    b.ToTable("ResultadoPartidas");
                });

            modelBuilder.Entity("Entidades.Torneo", b =>
                {
                    b.Property<int>("TorneoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TorneoId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TorneoId");

                    b.ToTable("TorneosCasuales");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Torneo");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entidades.TorneoProfesional", b =>
                {
                    b.HasBaseType("Entidades.Torneo");

                    b.Property<int>("Premio")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TorneoProfesional");
                });

            modelBuilder.Entity("Entidades.Equipo", b =>
                {
                    b.HasOne("Entidades.Jugador", "Capitan")
                        .WithMany()
                        .HasForeignKey("CapitanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entidades.Torneo", null)
                        .WithMany("Equipos")
                        .HasForeignKey("TorneoId");

                    b.Navigation("Capitan");
                });

            modelBuilder.Entity("Entidades.Jugador", b =>
                {
                    b.HasOne("Entidades.Equipo", null)
                        .WithMany("Jugadores")
                        .HasForeignKey("EquipoId");

                    b.HasOne("Entidades.Rango", "Rango")
                        .WithMany()
                        .HasForeignKey("RangoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rango");
                });

            modelBuilder.Entity("Entidades.Partida", b =>
                {
                    b.HasOne("Entidades.Torneo", null)
                        .WithMany("Partidas")
                        .HasForeignKey("TorneoId");
                });

            modelBuilder.Entity("Entidades.ResultadoPartida", b =>
                {
                    b.HasOne("Entidades.Partida", "Partida")
                        .WithOne("Resultado")
                        .HasForeignKey("Entidades.ResultadoPartida", "PartidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("Entidades.Equipo", b =>
                {
                    b.Navigation("Jugadores");
                });

            modelBuilder.Entity("Entidades.Partida", b =>
                {
                    b.Navigation("Resultado")
                        .IsRequired();
                });

            modelBuilder.Entity("Entidades.Torneo", b =>
                {
                    b.Navigation("Equipos");

                    b.Navigation("Partidas");
                });
#pragma warning restore 612, 618
        }
    }
}
